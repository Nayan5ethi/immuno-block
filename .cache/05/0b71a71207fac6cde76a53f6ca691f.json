{"id":"../node_modules/lodash-es/isLength.js","dependencies":[{"name":"/home/tanay/Immuno-Block/immuno-block/package.json","includedInParent":true,"mtime":1603789177571},{"name":"/home/tanay/Immuno-Block/immuno-block/.babelrc","includedInParent":true,"mtime":1603138527392},{"name":"/home/tanay/Immuno-Block/immuno-block/node_modules/lodash-es/package.json","includedInParent":true,"mtime":1603141896421}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\n\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nvar _default = isLength;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/lodash-es/isLength.js","original":{"line":1,"column":0}},{"generated":{"line":9,"column":0},"source":"../node_modules/lodash-es/isLength.js","original":{"line":2,"column":0}},{"name":"MAX_SAFE_INTEGER","generated":{"line":9,"column":4},"source":"../node_modules/lodash-es/isLength.js","original":{"line":2,"column":4}},{"generated":{"line":9,"column":20},"source":"../node_modules/lodash-es/isLength.js","original":{"line":2,"column":20}},{"generated":{"line":9,"column":23},"source":"../node_modules/lodash-es/isLength.js","original":{"line":2,"column":23}},{"generated":{"line":9,"column":39},"source":"../node_modules/lodash-es/isLength.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/lodash-es/isLength.js","original":{"line":4,"column":0}},{"generated":{"line":37,"column":0},"source":"../node_modules/lodash-es/isLength.js","original":{"line":30,"column":0}},{"name":"isLength","generated":{"line":37,"column":9},"source":"../node_modules/lodash-es/isLength.js","original":{"line":30,"column":9}},{"generated":{"line":37,"column":17},"source":"../node_modules/lodash-es/isLength.js","original":{"line":30,"column":0}},{"name":"value","generated":{"line":37,"column":18},"source":"../node_modules/lodash-es/isLength.js","original":{"line":30,"column":18}},{"generated":{"line":37,"column":23},"source":"../node_modules/lodash-es/isLength.js","original":{"line":30,"column":0}},{"generated":{"line":37,"column":25},"source":"../node_modules/lodash-es/isLength.js","original":{"line":30,"column":25}},{"generated":{"line":38,"column":0},"source":"../node_modules/lodash-es/isLength.js","original":{"line":31,"column":2}},{"generated":{"line":38,"column":9},"source":"../node_modules/lodash-es/isLength.js","original":{"line":31,"column":9}},{"name":"value","generated":{"line":38,"column":16},"source":"../node_modules/lodash-es/isLength.js","original":{"line":31,"column":16}},{"generated":{"line":38,"column":21},"source":"../node_modules/lodash-es/isLength.js","original":{"line":31,"column":9}},{"generated":{"line":38,"column":25},"source":"../node_modules/lodash-es/isLength.js","original":{"line":31,"column":25}},{"generated":{"line":38,"column":33},"source":"../node_modules/lodash-es/isLength.js","original":{"line":31,"column":9}},{"name":"value","generated":{"line":38,"column":37},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":4}},{"generated":{"line":38,"column":42},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":9}},{"generated":{"line":38,"column":45},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":12}},{"generated":{"line":38,"column":46},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":13}},{"generated":{"line":38,"column":47},"source":"../node_modules/lodash-es/isLength.js","original":{"line":31,"column":9}},{"name":"value","generated":{"line":38,"column":51},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":18}},{"generated":{"line":38,"column":56},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":23}},{"generated":{"line":38,"column":59},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":26}},{"generated":{"line":38,"column":60},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":18}},{"generated":{"line":38,"column":64},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":31}},{"generated":{"line":38,"column":65},"source":"../node_modules/lodash-es/isLength.js","original":{"line":31,"column":9}},{"name":"value","generated":{"line":38,"column":69},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":36}},{"generated":{"line":38,"column":74},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":41}},{"name":"MAX_SAFE_INTEGER","generated":{"line":38,"column":78},"source":"../node_modules/lodash-es/isLength.js","original":{"line":32,"column":45}},{"generated":{"line":38,"column":94},"source":"../node_modules/lodash-es/isLength.js","original":{"line":31,"column":2}},{"generated":{"line":39,"column":0},"source":"../node_modules/lodash-es/isLength.js","original":{"line":33,"column":1}},{"name":"isLength","generated":{"line":41,"column":15},"source":"../node_modules/lodash-es/isLength.js","original":{"line":35,"column":15}}],"sources":{"../node_modules/lodash-es/isLength.js":"/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n"},"lineCount":null}},"error":null,"hash":"abedb5aaeac139e9a2f2a0b547b93ecb","cacheData":{"env":{}}}